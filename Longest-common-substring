#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

std::string longestCommonSubstring(const std::string& s1, const std::string& s2) {
    int n = s1.length();
    int m = s2.length();
    std::vector<std::vector<int>> dp(n + 1, std::vector<int>(m + 1, 0));
    int length = 0;  // Length of the longest common substring
    std::string lcs; // The longest common substring

    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            if (s1[i - 1] == s2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
                if (dp[i][j] > length) {
                    length = dp[i][j];
                    lcs = s1.substr(i - length, length);
                }
            }
        }
    }

    // Output the 2D grid
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            std::cout << dp[i][j] << " ";
        }
        std::cout << std::endl;
    }

    return lcs;
}

int main() {
    std::string s1, s2;
    std::cout << "Enter first string: ";
    std::cin >> s1;
    std::cout << "Enter second string: ";
    std::cin >> s2;

    std::string result = longestCommonSubstring(s1, s2);
    std::cout << "Longest common substring: " << result << std::endl;

    return 0;
}
